/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.2.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import * as jQuery from 'jquery';

export class Client {
    baseUrl: string;
    beforeSend: any = undefined;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string) {
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:60499";
    }

    /**
     * Authenticates a session and generates a FormsAuthenticationTicket and cookie
     */
    apiAccount(siteID: string, uID: string) {
        return new Promise<string | null>((resolve, reject) => {
            this.apiAccountWithCallbacks(siteID, uID, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private apiAccountWithCallbacks(siteID: string, uID: string, onSuccess?: (result: string | null) => void, onFail?: (exception: string | string | string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/account?";
        if (siteID === undefined || siteID === null)
            throw new Error("The parameter 'siteID' must be defined and cannot be null.");
        else
            url_ += "siteID=" + encodeURIComponent("" + siteID) + "&";
        if (uID === undefined || uID === null)
            throw new Error("The parameter 'uID' must be defined and cannot be null.");
        else
            url_ += "uID=" + encodeURIComponent("" + uID) + "&";
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processApiAccountWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processApiAccountWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processApiAccountWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processApiAccount(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processApiAccount(xhr: any): string | null | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 401) {
            const _responseText = xhr.responseText;
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = resultData401 !== undefined ? resultData401 : <any>null;
            return throwException("unusable credentials", status, _responseText, _headers, result401);
        } else if (status === 400) {
            const _responseText = xhr.responseText;
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("not allowed now", status, _responseText, _headers, result400);
        } else if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * Requests permission to try the UI
     */
    apiUitrial(request: UITrialRequest) {
        return new Promise<UITrialResponse | null>((resolve, reject) => {
            this.apiUitrialWithCallbacks(request, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private apiUitrialWithCallbacks(request: UITrialRequest, onSuccess?: (result: UITrialResponse | null) => void, onFail?: (exception: string | string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/uitrial";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "post",
            data: content_,
            dataType: "text",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processApiUitrialWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processApiUitrialWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processApiUitrialWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processApiUitrial(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processApiUitrial(xhr: any): UITrialResponse | null | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 400) {
            const _responseText = xhr.responseText;
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Incorrect site key or email", status, _responseText, _headers, result400);
        } else if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UITrialResponse.fromJS(resultData200) : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * Ends this session
     */
    apiAccountLogout() {
        return new Promise<boolean>((resolve, reject) => {
            this.apiAccountLogoutWithCallbacks((result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private apiAccountLogoutWithCallbacks(onSuccess?: (result: boolean) => void, onFail?: (exception: string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/account/logout";
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
                "Accept": "application/json"
            }
        }).done((_data, _textStatus, xhr) => {
            this.processApiAccountLogoutWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processApiAccountLogoutWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processApiAccountLogoutWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processApiAccountLogout(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processApiAccountLogout(xhr: any): boolean | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 200) {
            const _responseText = xhr.responseText;
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return null;
    }

    /**
     * Returns name of site
     */
    apiSiteName(siteID: string) {
        return new Promise<void>((resolve, reject) => {
            this.apiSiteNameWithCallbacks(siteID, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private apiSiteNameWithCallbacks(siteID: string, onSuccess?: (result: void) => void, onFail?: (exception: string | string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/site/{siteID}/name";
        if (siteID === undefined || siteID === null)
            throw new Error("The parameter 'siteID' must be defined.");
        url_ = url_.replace("{siteID}", encodeURIComponent("" + siteID));
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
            }
        }).done((_data, _textStatus, xhr) => {
            this.processApiSiteNameWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processApiSiteNameWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processApiSiteNameWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processApiSiteName(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processApiSiteName(xhr: any): void | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 400) {
            const _responseText = xhr.responseText;
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Incorrect site key", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }

    /**
     * Returns license for the requested server
     */
    apiSiteLicense(siteID: string, serverName: string | null) {
        return new Promise<void>((resolve, reject) => {
            this.apiSiteLicenseWithCallbacks(siteID, serverName, (result) => resolve(result), (exception, _reason) => reject(exception));
        });
    }

    private apiSiteLicenseWithCallbacks(siteID: string, serverName: string | null, onSuccess?: (result: void) => void, onFail?: (exception: string | string, reason: string) => void) {
        let url_ = this.baseUrl + "/api/site/{siteID}/license?";
        if (siteID === undefined || siteID === null)
            throw new Error("The parameter 'siteID' must be defined.");
        url_ = url_.replace("{siteID}", encodeURIComponent("" + siteID));
        if (serverName === undefined)
            throw new Error("The parameter 'serverName' must be defined.");
        else if(serverName !== null)
            url_ += "serverName=" + encodeURIComponent("" + serverName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        jQuery.ajax({
            url: url_,
            beforeSend: this.beforeSend,
            type: "get",
            dataType: "text",
            headers: {
            }
        }).done((_data, _textStatus, xhr) => {
            this.processApiSiteLicenseWithCallbacks(url_, xhr, onSuccess, onFail);
        }).fail((xhr) => {
            this.processApiSiteLicenseWithCallbacks(url_, xhr, onSuccess, onFail);
        });
    }

    private processApiSiteLicenseWithCallbacks(_url: string, xhr: any, onSuccess?: any, onFail?: any): void {
        try {
            let result = this.processApiSiteLicense(xhr);
            if (onSuccess !== undefined)
                onSuccess(result);
        } catch (e) {
            if (onFail !== undefined)
                onFail(e, "http_service_exception");
        }
    }

    protected processApiSiteLicense(xhr: any): void | null {
        const status = xhr.status;

        let _headers: any = {};
        if (status === 400) {
            const _responseText = xhr.responseText;
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 !== undefined ? resultData400 : <any>null;
            return throwException("Incorrect site key", status, _responseText, _headers, result400);
        } else if (status !== 200 && status !== 204) {
            const _responseText = xhr.responseText;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return;
    }
}

export class UITrialResponse implements IUITrialResponse {
    responseKey!: string;
    permissionGranted!: boolean;
    grantCount!: number;
    grantInfo?: string | undefined;
    checksum?: string | undefined;

    constructor(data?: IUITrialResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.responseKey = _data["responseKey"];
            this.permissionGranted = _data["permissionGranted"];
            this.grantCount = _data["grantCount"];
            this.grantInfo = _data["grantInfo"];
            this.checksum = _data["checksum"];
        }
    }

    static fromJS(data: any): UITrialResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UITrialResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["responseKey"] = this.responseKey;
        data["permissionGranted"] = this.permissionGranted;
        data["grantCount"] = this.grantCount;
        data["grantInfo"] = this.grantInfo;
        data["checksum"] = this.checksum;
        return data; 
    }
}

export interface IUITrialResponse {
    responseKey: string;
    permissionGranted: boolean;
    grantCount: number;
    grantInfo?: string | undefined;
    checksum?: string | undefined;
}

export class UITrialRequest implements IUITrialRequest {
    email!: string;
    fullName!: string;
    userKey!: string;
    siteKey!: string;
    comment?: string | undefined;

    constructor(data?: IUITrialRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.fullName = _data["fullName"];
            this.userKey = _data["userKey"];
            this.siteKey = _data["siteKey"];
            this.comment = _data["comment"];
        }
    }

    static fromJS(data: any): UITrialRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UITrialRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["fullName"] = this.fullName;
        data["userKey"] = this.userKey;
        data["siteKey"] = this.siteKey;
        data["comment"] = this.comment;
        return data; 
    }
}

export interface IUITrialRequest {
    email: string;
    fullName: string;
    userKey: string;
    siteKey: string;
    comment?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}